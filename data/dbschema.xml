<?xml version="1.0" encoding="utf-8"?>
<schema>
    <revision version="1">
        <description>
            Initial schema.
        </description>
        <sql>
            CREATE TABLE IF NOT EXISTS Libraries (
                LibraryID INTEGER PRIMARY KEY AUTOINCREMENT,
                Name TEXT NOT NULL UNIQUE,
                Path TEXT NOT NULL UNIQUE
            );

            CREATE TABLE IF NOT EXISTS Playlists (
                PlaylistID INTEGER PRIMARY KEY AUTOINCREMENT,
                Name TEXT NOT NULL UNIQUE,
                PlaylistIndex INTEGER
            );

            CREATE TABLE IF NOT EXISTS Tracks (
                TrackID INTEGER PRIMARY KEY AUTOINCREMENT,
                FilePath TEXT UNIQUE NOT NULL,
                Title TEXT,
                TrackNumber INTEGER,
                TrackTotal INTEGER,
                Artists TEXT,
                AlbumArtist TEXT,
                Album TEXT,
                CoverPath TEXT,
                DiscNumber INTEGER,
                DiscTotal INTEGER,
                Date TEXT,
                Composer TEXT,
                Performer TEXT,
                Genres TEXT,
                Comment TEXT,
                Duration INTEGER DEFAULT 0,
                FileSize INTEGER DEFAULT 0,
                BitRate INTEGER DEFAULT 0,
                SampleRate INTEGER DEFAULT 0,
                ExtraTags BLOB,
                Type INTEGER DEFAULT 0,
                ModifiedDate INTEGER,
                LibraryID INTEGER DEFAULT -1,
                TrackHash TEXT
            );

            CREATE TABLE IF NOT EXISTS TrackStats (
                TrackHash TEXT PRIMARY KEY,
                LastSeen INTEGER,
                AddedDate INTEGER,
                FirstPlayed INTEGER,
                LastPlayed INTEGER,
                PlayCount INTEGER DEFAULT 0,
                Rating INTEGER DEFAULT 0
            );

            CREATE TABLE IF NOT EXISTS PlaylistTracks (
                PlaylistID INTEGER NOT NULL REFERENCES Playlists ON DELETE CASCADE,
                TrackID INTEGER NOT NULL REFERENCES Tracks ON DELETE CASCADE,
                TrackIndex INTEGER NOT NULL
            );

            CREATE TABLE IF NOT EXISTS Settings (
                Name TEXT UNIQUE NOT NULL,
                Value TEXT
            );

            CREATE INDEX IF NOT EXISTS TrackIndex ON Tracks(TrackHash);
            CREATE INDEX IF NOT EXISTS PlaylistIndex ON Playlists(PlaylistID, Name);
            CREATE INDEX IF NOT EXISTS PlaylistTracksIndex ON PlaylistTracks(PlaylistID, TrackIndex);
        </sql>
    </revision>
    <revision version="2">
        <description>
            Adds an embedded artwork column.
        </description>
        <sql>
            ALTER TABLE Tracks ADD COLUMN HasEmbeddedCover INTEGER DEFAULT 0;
        </sql>
    </revision>
    <revision version="3">
        <description>
            Remove album cover related columns.
        </description>
        <sql>
            ALTER TABLE Tracks DROP COLUMN CoverPath;
            ALTER TABLE Tracks DROP COLUMN HasEmbeddedCover;
        </sql>
    </revision>
    <revision version="4">
        <description>
            Add channel count column to tracks.
        </description>
        <sql>
            ALTER TABLE Tracks ADD COLUMN Channels INTEGER DEFAULT 0;
        </sql>
    </revision>
    <revision version="5">
        <description>
            Add bit depth column to tracks.
        </description>
        <sql>
            ALTER TABLE Tracks ADD COLUMN BitDepth INTEGER DEFAULT -1;
        </sql>
    </revision>
    <revision version="6" foreignKeys="1">
        <description>
            Remove unique constraint on FilePath. Add unique index on FilePath and Offset. Add CuePath.
        </description>
        <sql>
            CREATE TABLE NewTracks (
                TrackID INTEGER PRIMARY KEY AUTOINCREMENT,
                FilePath TEXT NOT NULL,
                Title TEXT,
                TrackNumber INTEGER,
                TrackTotal INTEGER,
                Artists TEXT,
                AlbumArtist TEXT,
                Album TEXT,
                DiscNumber INTEGER,
                DiscTotal INTEGER,
                Date TEXT,
                Composer TEXT,
                Performer TEXT,
                Genres TEXT,
                Comment TEXT,
                CuePath TEXT,
                Offset INTEGER DEFAULT 0,
                Duration INTEGER DEFAULT 0,
                FileSize INTEGER DEFAULT 0,
                BitRate INTEGER DEFAULT 0,
                SampleRate INTEGER DEFAULT 0,
                Channels INTEGER DEFAULT 0,
                BitDepth INTEGER DEFAULT -1,
                ExtraTags BLOB,
                Type INTEGER DEFAULT 0,
                ModifiedDate INTEGER,
                LibraryID INTEGER DEFAULT -1,
                TrackHash TEXT
            );

            INSERT INTO NewTracks (
                TrackID, FilePath, Title, TrackNumber, TrackTotal, Artists, AlbumArtist, Album, DiscNumber,
                DiscTotal, Date, Composer, Performer, Genres, Comment, Duration, FileSize, BitRate, SampleRate,
                ExtraTags, Type, ModifiedDate, LibraryID, TrackHash
            )
            SELECT
                TrackID, FilePath, Title, TrackNumber, TrackTotal, Artists, AlbumArtist, Album, DiscNumber,
                DiscTotal, Date, Composer, Performer, Genres, Comment, Duration, FileSize, BitRate, SampleRate,
                ExtraTags, Type, ModifiedDate, LibraryID, TrackHash
            FROM Tracks;

            DROP TABLE Tracks;
            ALTER TABLE NewTracks RENAME TO Tracks;

            CREATE UNIQUE INDEX IF NOT EXISTS UniqueTrack ON Tracks(FilePath, Offset);
        </sql>
    </revision>
    <revision version="7" foreignKeys="1">
        <description>
            Change codec column type from integer to text.
        </description>
        <sql>
            CREATE TABLE NewTracks (
                TrackID INTEGER PRIMARY KEY AUTOINCREMENT,
                FilePath TEXT NOT NULL,
                Title TEXT,
                TrackNumber INTEGER,
                TrackTotal INTEGER,
                Artists TEXT,
                AlbumArtist TEXT,
                Album TEXT,
                DiscNumber INTEGER,
                DiscTotal INTEGER,
                Date TEXT,
                Composer TEXT,
                Performer TEXT,
                Genres TEXT,
                Comment TEXT,
                CuePath TEXT,
                Offset INTEGER DEFAULT 0,
                Duration INTEGER DEFAULT 0,
                FileSize INTEGER DEFAULT 0,
                BitRate INTEGER DEFAULT 0,
                SampleRate INTEGER DEFAULT 0,
                Channels INTEGER DEFAULT 0,
                BitDepth INTEGER DEFAULT -1,
                Codec TEXT,
                ExtraTags BLOB,
                ModifiedDate INTEGER,
                LibraryID INTEGER DEFAULT -1,
                TrackHash TEXT
            );

            INSERT INTO NewTracks (
                TrackID, FilePath, Title, TrackNumber, TrackTotal, Artists, AlbumArtist, Album, DiscNumber, DiscTotal, Date,
                Composer, Performer, Genres, Comment, CuePath, Offset, Duration, FileSize, BitRate, SampleRate, Channels,
                BitDepth, ExtraTags, ModifiedDate, LibraryID, TrackHash
            )
            SELECT
                TrackID, FilePath, Title, TrackNumber, TrackTotal, Artists, AlbumArtist, Album, DiscNumber, DiscTotal, Date,
                Composer, Performer, Genres, Comment, CuePath, Offset, Duration, FileSize, BitRate, SampleRate, Channels,
                BitDepth, ExtraTags, ModifiedDate, LibraryID, TrackHash
            FROM Tracks;

            DROP TABLE Tracks;
            ALTER TABLE NewTracks RENAME TO Tracks;

            CREATE UNIQUE INDEX IF NOT EXISTS UniqueTrack ON Tracks(FilePath, Offset);
        </sql>
    </revision>
    <revision version="8">
        <description>
            Adds subsong index column.
        </description>
        <sql>
            ALTER TABLE Tracks ADD COLUMN Subsong INTEGER DEFAULT -1;

            DROP INDEX IF EXISTS UniqueTrack;
            CREATE UNIQUE INDEX IF NOT EXISTS UniqueTrack ON Tracks(FilePath, Offset, Subsong);
        </sql>
    </revision>
</schema>
