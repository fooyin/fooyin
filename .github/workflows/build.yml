name: Build

on:
  push:
  pull_request:
    types: [opened, synchronize, reopened]
  release:
    types: [published]

env:
  BUILD_TESTS: ON
  CMAKE_PRESET: release-vcpkg
  VCPKG_DISABLE_METRICS: true
  QT_VERSION: '6.8.3'

permissions:
  contents: write # needed for vcpkg cache

jobs:
  archlinux:
    name: Arch Linux
    runs-on: ubuntu-latest
    container:
      image: archlinux:latest

    steps:
      - name: Install git
        run: |
          pacman -Syy --noconfirm
          pacman -S git --noconfirm

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Dependencies
        run: |
          ./ci/archlinux-depends.sh

      - name: Build
        run: |
          ./ci/archlinux-build.sh

      - name: Run tests
        if: env.BUILD_TESTS == 'ON'
        run: |
          ./ci/tests.sh

  fedora:
    name: Fedora
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        fedora_version: [ '41', '42', '43' ]
    container:
      image: fedora:${{matrix.fedora_version}}
    steps:
      - name: Install git
        run: |
          dnf -y install git

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Dependencies
        run: |
          ./ci/fedora-depends.sh

      - name: Build
        run: |
          ./ci/fedora-build.sh

      - name: Run tests
        if: env.BUILD_TESTS == 'ON'
        run: |
          ./ci/tests.sh

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: fedora-${{matrix.fedora_version}}
          path: rpm

  debian:
    name: Debian
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        debian_version: [ 'bookworm', 'trixie', 'forky' ]
    container:
      image: debian:${{matrix.debian_version}}
    steps:
      - name: Install git
        run: |
          apt-get update -qq
          apt-get install -qq --force-yes git

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Dependencies
        run: |
          ./ci/ubuntu-depends.sh

      - name: Install GTest
        run: |
          cd /usr/src/gtest
          cmake .
          make
          cp lib/*.a /usr/lib
          ln -sf /usr/lib/libgtest.a /usr/local/lib/libgtest.a
          ln -sf /usr/lib/libgtest_main.a /usr/local/lib/libgtest_main.a

      - name: Build
        run: |
          ./ci/ubuntu-build.sh

      - name: Run tests
        if: env.BUILD_TESTS == 'ON'
        run: |
          ./ci/tests.sh

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: debian-${{matrix.debian_version}}
          path: deb

  ubuntu:
    name: Ubuntu
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        ubuntu_version: [ 'noble', 'plucky', 'questing' ]
    container:
      image: ubuntu:${{matrix.ubuntu_version}}
    steps:
      - name: Install git
        run: |
          apt-get update -qq
          apt-get install -qq --force-yes git

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Dependencies
        run: |
          ./ci/ubuntu-depends.sh

      - name: Install GTest
        run: |
          cd /usr/src/gtest
          cmake .
          make
          cp lib/*.a /usr/lib
          ln -sf /usr/lib/libgtest.a /usr/local/lib/libgtest.a
          ln -sf /usr/lib/libgtest_main.a /usr/local/lib/libgtest_main.a

      - name: Build
        run: |
          ./ci/ubuntu-build.sh

      - name: Run tests
        if: env.BUILD_TESTS == 'ON'
        run: |
          ./ci/tests.sh

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ubuntu-${{matrix.ubuntu_version}}
          path: deb

  freebsd:
    name: FreeBSD
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: run VM
        uses: cross-platform-actions/action@master
        with:
          operating_system: freebsd
          architecture: x86-64
          cpu_count: 4
          shell: bash
          version: '14.2'
          run: |
            ./ci/freebsd-depends.sh
            ./ci/freebsd-build.sh
            ./ci/tests.sh

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: freebsd-14.2
          path: pkg

  windows:
    name: Windows
    runs-on: windows-latest
    strategy:
      matrix:
        include:
          - arch: amd64
            qt-arch: win64_msvc2022_64
            msvc-arch: amd64
            triplet: x64-windows
            cmake-preset: release-vcpkg
          # - arch: arm64
          #   qt-arch: win64_msvc2022_arm64_cross_compiled
          #   msvc-arch: amd64_arm64
          #   triplet: arm64-windows
          #   cmake-preset: release-vcpkg-arm64

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Install CMake
        uses: lukka/get-cmake@latest

      - name: Install dependencies
        run: choco install ninja nsis -y

      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{ env.QT_VERSION }}
          archives: qtbase qtsvg qttools
          cache: true
          arch: ${{ matrix.qt-arch }}
          install-deps: 'true'

      - name: Setup MSVC Environment
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.msvc-arch }}

      - name: Setup vcpkg cache
        shell: pwsh
        run: |
          $cacheDir = "${{ github.workspace }}/vcpkg-binary-cache"
          New-Item -ItemType Directory -Force -Path $cacheDir
          echo "VCPKG_BINARY_SOURCES=clear;files,$cacheDir,readwrite" >> $env:GITHUB_ENV
          echo "VCPKG_TARGET_TRIPLET=${{ matrix.triplet }}" >> $env:GITHUB_ENV

      - name: Cache vcpkg
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/vcpkg-binary-cache
            build-${{ matrix.cmake-preset }}_installed
          key: ${{ runner.os }}-vcpkg-${{ matrix.cmake-preset }}-${{ hashFiles('**/vcpkg.json', '**/vcpkg-configuration.json') }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-${{ matrix.cmake-preset }}-
            ${{ runner.os }}-vcpkg-

      - name: Set CMAKE_PRESET
        shell: pwsh
        run: echo "CMAKE_PRESET=${{ matrix.cmake-preset }}" >> $env:GITHUB_ENV

      - name: Build & Package
        run: .\ci\windows-build.ps1
        shell: pwsh

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: "windows-${{ matrix.arch }}"
          path: artifacts

  macos:
    strategy:
      matrix:
        include:
          - arch: amd64
            runs-on: macos-15-intel
          - arch: aarch64
            runs-on: macos-latest
    name: macOS-${{ matrix.arch }}
    runs-on: ${{ matrix.runs-on }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Dependencies
        run: |
          ./ci/macos-depends.sh

      - name: Build
        run: |
          ./ci/macos-build.sh

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-${{ matrix.arch }}
          path: txz

  attach:
    name: Attach to release
    if: github.event_name == 'release' && github.event.action == 'published'
    runs-on: ubuntu-latest
    needs:
      - fedora
      - debian
      - ubuntu
      - freebsd
      - windows
      - macos
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
          merge-multiple: true

      - name: Check artifact files
        run: ls -R ./artifacts

      - name: Upload artifacts to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.event.release.tag_name }}
          file: ./artifacts/*
          overwrite: true
          file_glob: true
